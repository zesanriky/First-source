
#include <assert.h>
#include <map>
#include <limits>
#include <iostream> // I added this was not given am I doing right ?


using namespace std;

template<class K, class V>
class interval_map {
    friend void IntervalMapTest();

private:
    std::map<K,V> m_map;

public:
    // constructor associates whole range of K with val by inserting (K_min, val)
    // into the map
    interval_map( V const& val) {
        m_map.insert(m_map.begin(),std::make_pair(std::numeric_limits<K>::lowest(),val));
    }

    // Assign value val to interval [keyBegin, keyEnd). 
    // Overwrite previous values in this interval. 
    // Do not change values outside this interval.
    // Conforming to the C++ Standard Library conventions, the interval 
    // includes keyBegin, but excludes keyEnd.
    // If !( keyBegin < keyEnd ), this designates an empty interval, 
    // and assign must do nothing.



void assign( K const& keyBegin, K const& keyEnd, V const& val ) {

 // My code strats
char  key;
int new_value;
 // Practice
 //	typename std::map<K,V>::iterator it =m_map.begin();

 typename std::map<K,V>::iterator it = m_map.lower_bound( key);
 

 if(!(keyBegin < keyEnd))
    return;


  for(int j=keyBegin; j<keyEnd; j++)
  {
    it = m_map.find(j);

   if (it == m_map.end() || it->first != key)
{
  m_map.insert(it, std::pair<K const &, V const &>(key,new_value));  // O(1) !
}

 else 
    { 
        it->second = new_value;
      m_map.erase(it);
      m_map.insert(pair<K,V>(j, val));
    }
    
 typename std::map<K,V>::iterator itq = m_map.upper_bound( key);
 
 
 itq = m_map.find(j);

   if (itq == m_map.end() || itq->first != key)
{
  m_map.insert(itq, std::pair<K const &, V const &>(key,new_value));  // O(1) !
}

 else 
    { 
        itq->second = new_value;
      m_map.erase(itq);
      m_map.insert(pair<K,V>(j, val));
    }
    
    

    
  } //  for loop ends  

    
      
//end of my code

 }
    // look-up of the value associated with key
    V const& operator[]( K const& key ) const {
        return ( --m_map.upper_bound(key) )->second;
    }


void IntervalMapTest()

{
    
  
    
    }
//me code ends



};

// Many solutions we receive are incorrect. Consider using a randomized test
// to discover the cases that your implementation does not handle correctly.
// We recommend to implement a function IntervalMapTest() here that tests the
// functionality of the interval_map, for example using a map of unsigned int
// intervals to char.

int main() {
      

interval_map<unsigned int, char> m('f');

m.assign(5,9,3);


char K ;

for (int i= 0; i< 10;i++)

 cout<<(m[K]);
 
 interval_map<unsigned int, char> n('l');

n.assign(4,1,2);

for (int i= 0; i< 5;i++)
  
 cout<<(n[K]);

    
}

